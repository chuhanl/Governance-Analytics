link='https://github.com/chuhanl/Governance-Analytics/raw/main/final_data.RDS'
myFile=url(link)
fromPy=readRDS(file = myFile)
row.names(fromPy)=NULL
str(fromPy)
# subset the data
selection=c("Country","LifeExpectancyatBirth", "GenderLifeGapatBirth","LifeExpectancyat60","GenderLifeGapat60")
dataToCluster=fromPy[,selection]
# set labels as row index
row.names(dataToCluster)=dataToCluster$Country
dataToCluster$Country=NULL
# decide if data needs to be transformed
boxplot(dataToCluster,horizontal = T, las=2,cex.axis=0.4)
# standardizing
dataToCluster=as.data.frame(scale(dataToCluster))
### or smoothing
# log(dataToCluster)
# set random seed
set.seed(999)
# decide distance method and compute distance matrix
library(cluster)
dataToCluster_DM=daisy(x=dataToCluster, metric = "gower")
# for partitioning
library(factoextra)
fviz_nbclust(dataToCluster,
pam,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,verbose = F)
# for hierarchical (agglomerative)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "agnes")
# for hierarchical (divisive)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "diana")
NumberOfClusterDesired=4
# Partitioning technique
res.pam = pam(x=dataToCluster_DM,
k = NumberOfClusterDesired,
cluster.only = F)
# Hierarchical technique- agglomerative approach
#library(factoextra)
res.agnes= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='agnes',
hc_method = "ward.D2")
# Hierarchical technique- divisive approach
res.diana= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='diana',
hc_method = "ward.D2")
# add results to original data frame
fromPy$pam=as.factor(res.pam$clustering)
fromPy$agn=as.factor(res.agnes$cluster)
fromPy$dia=as.factor(res.diana$cluster)
aggregate(data=fromPy,
Overallscore~pam,
FUN=mean)
aggregate(data=fromPy,
LifeExpectancyatBirth~pam,
FUN=mean)
# plot silhouettes
fviz_silhouette(res.pam)
fviz_silhouette(res.agnes)
fviz_silhouette(res.diana)
# detecting cases badly clustered
head(data.frame(res.pam$silinfo$widths),10)
pamEval=data.frame(res.pam$silinfo$widths)
agnEval=data.frame(res.agnes$silinfo$widths)
diaEval=data.frame(res.diana$silinfo$widths)
pamPoor=rownames(pamEval[pamEval$sil_width<0,])
agnPoor=rownames(agnEval[agnEval$sil_width<0,])
diaPoor=rownames(diaEval[diaEval$sil_width<0,])
library("qpcR")
install.packages("qpcR")
library("qpcR")
library(qpcR)
install.packages("qpcR")
library(qpcR)
link='https://github.com/chuhanl/Governance-Analytics/raw/main/final_data.RDS'
myFile=url(link)
fromPy=readRDS(file = myFile)
row.names(fromPy)=NULL
str(fromPy)
# subset the data
selection=c("Country","LifeExpectancyatBirth", "GenderLifeGapatBirth","LifeExpectancyat60","GenderLifeGapat60")
dataToCluster=fromPy[,selection]
# set labels as row index
row.names(dataToCluster)=dataToCluster$Country
dataToCluster$Country=NULL
# decide if data needs to be transformed
boxplot(dataToCluster,horizontal = T, las=2,cex.axis=0.4)
# standardizing
dataToCluster=as.data.frame(scale(dataToCluster))
### or smoothing
# log(dataToCluster)
# set random seed
set.seed(999)
# decide distance method and compute distance matrix
library(cluster)
dataToCluster_DM=daisy(x=dataToCluster, metric = "gower")
# for partitioning
library(factoextra)
fviz_nbclust(dataToCluster,
pam,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,verbose = F)
# for hierarchical (agglomerative)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "agnes")
# for hierarchical (divisive)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "diana")
NumberOfClusterDesired=4
# Partitioning technique
res.pam = pam(x=dataToCluster_DM,
k = NumberOfClusterDesired,
cluster.only = F)
# Hierarchical technique- agglomerative approach
res.agnes= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='agnes',
hc_method = "ward.D2")
# Hierarchical technique- divisive approach
res.diana= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='diana',
hc_method = "ward.D2")
# add results to original data frame
fromPy$pam=as.factor(res.pam$clustering)
fromPy$agn=as.factor(res.agnes$cluster)
fromPy$dia=as.factor(res.diana$cluster)
# Verify ordinality in clusters?
# plot silhouettes
fviz_silhouette(res.pam)
fviz_silhouette(res.agnes)
fviz_silhouette(res.diana)
# detecting cases badly clustered
head(data.frame(res.pam$silinfo$widths),10)
pamEval=data.frame(res.pam$silinfo$widths)
agnEval=data.frame(res.agnes$silinfo$widths)
diaEval=data.frame(res.diana$silinfo$widths)
pamPoor=rownames(pamEval[pamEval$sil_width<0,])
agnPoor=rownames(agnEval[agnEval$sil_width<0,])
diaPoor=rownames(diaEval[diaEval$sil_width<0,])
library("qpcR")
install.packages("rgl")
library("qpcR")
library(rgl)
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
install.packages(c("class", "cli", "dplyr", "fansi", "foreign", "glue", "jsonlite", "lme4", "magrittr", "MASS", "Matrix", "nlme", "nnet", "pillar", "quantreg", "readr", "rlang", "rpart", "spatial", "yaml"))
link='https://github.com/chuhanl/Governance-Analytics/raw/main/final_data.RDS'
myFile=url(link)
fromPy=readRDS(file = myFile)
row.names(fromPy)=NULL
str(fromPy)
# subset the data
selection=c("Country","LifeExpectancyatBirth", "GenderLifeGapatBirth","LifeExpectancyat60","GenderLifeGapat60")
dataToCluster=fromPy[,selection]
# set labels as row index
row.names(dataToCluster)=dataToCluster$Country
dataToCluster$Country=NULL
# decide if data needs to be transformed
boxplot(dataToCluster,horizontal = T, las=2,cex.axis=0.4)
# standardizing
dataToCluster=as.data.frame(scale(dataToCluster))
### or smoothing
# log(dataToCluster)
# set random seed
set.seed(999)
# decide distance method and compute distance matrix
library(cluster)
dataToCluster_DM=daisy(x=dataToCluster, metric = "gower")
# for partitioning
library(factoextra)
fviz_nbclust(dataToCluster,
pam,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,verbose = F)
# for hierarchical (agglomerative)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "agnes")
# for hierarchical (divisive)
fviz_nbclust(dataToCluster,
hcut,
diss=dataToCluster_DM,
method = "gap_stat",
k.max = 10,
verbose = F,
hc_func = "diana")
NumberOfClusterDesired=4
# Partitioning technique
res.pam = pam(x=dataToCluster_DM,
k = NumberOfClusterDesired,
cluster.only = F)
# Hierarchical technique- agglomerative approach
res.agnes= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='agnes',
hc_method = "ward.D2")
# Hierarchical technique- divisive approach
res.diana= hcut(dataToCluster_DM,
k = NumberOfClusterDesired,
isdiss=TRUE,
hc_func='diana',
hc_method = "ward.D2")
# add results to original data frame
fromPy$pam=as.factor(res.pam$clustering)
fromPy$agn=as.factor(res.agnes$cluster)
fromPy$dia=as.factor(res.diana$cluster)
# Verify ordinality in clusters?
# plot silhouettes
fviz_silhouette(res.pam)
fviz_silhouette(res.agnes)
fviz_silhouette(res.diana)
# detecting cases badly clustered
head(data.frame(res.pam$silinfo$widths),10)
pamEval=data.frame(res.pam$silinfo$widths)
agnEval=data.frame(res.agnes$silinfo$widths)
diaEval=data.frame(res.diana$silinfo$widths)
pamPoor=rownames(pamEval[pamEval$sil_width<0,])
agnPoor=rownames(agnEval[agnEval$sil_width<0,])
diaPoor=rownames(diaEval[diaEval$sil_width<0,])
library("qpcR")
library(qpcR)
remove.packages("qpcR")
install.packages("qpcR")
library(qpcR)
library(rgl)
remove.packages("rgl")
install.packages("rgl")
library(rgl)
detach("package:rgl", unload = TRUE)
cbind(sort(pamPoor), sort(agnPoor),sort(diaPoor))
cbind(pamPoor, agnPoor,diaPoor)
diaPoor
agnPoor
pamPoor
cbind(pamPoor, agnPoor,diaPoor)
pamPoor
